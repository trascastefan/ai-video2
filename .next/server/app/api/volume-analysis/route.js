"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/volume-analysis/route";
exports.ids = ["app/api/volume-analysis/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvolume-analysis%2Froute&page=%2Fapi%2Fvolume-analysis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvolume-analysis%2Froute.ts&appDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvolume-analysis%2Froute&page=%2Fapi%2Fvolume-analysis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvolume-analysis%2Froute.ts&appDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_stefantrasca_CascadeProjects_ai_video_app_api_volume_analysis_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/volume-analysis/route.ts */ \"(rsc)/./app/api/volume-analysis/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/volume-analysis/route\",\n        pathname: \"/api/volume-analysis\",\n        filename: \"route\",\n        bundlePath: \"app/api/volume-analysis/route\"\n    },\n    resolvedPagePath: \"/Users/stefantrasca/CascadeProjects/ai-video/app/api/volume-analysis/route.ts\",\n    nextConfigOutput,\n    userland: _Users_stefantrasca_CascadeProjects_ai_video_app_api_volume_analysis_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/volume-analysis/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ2b2x1bWUtYW5hbHlzaXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnZvbHVtZS1hbmFseXNpcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnZvbHVtZS1hbmFseXNpcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnN0ZWZhbnRyYXNjYSUyRkNhc2NhZGVQcm9qZWN0cyUyRmFpLXZpZGVvJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnN0ZWZhbnRyYXNjYSUyRkNhc2NhZGVQcm9qZWN0cyUyRmFpLXZpZGVvJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzZCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktc3RvY2stdmlkZW8vP2M4MzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3N0ZWZhbnRyYXNjYS9DYXNjYWRlUHJvamVjdHMvYWktdmlkZW8vYXBwL2FwaS92b2x1bWUtYW5hbHlzaXMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3ZvbHVtZS1hbmFseXNpcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3ZvbHVtZS1hbmFseXNpc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdm9sdW1lLWFuYWx5c2lzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3N0ZWZhbnRyYXNjYS9DYXNjYWRlUHJvamVjdHMvYWktdmlkZW8vYXBwL2FwaS92b2x1bWUtYW5hbHlzaXMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdm9sdW1lLWFuYWx5c2lzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvolume-analysis%2Froute&page=%2Fapi%2Fvolume-analysis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvolume-analysis%2Froute.ts&appDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/volume-analysis/route.ts":
/*!******************************************!*\
  !*** ./app/api/volume-analysis/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _utils_finnhub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/finnhub */ \"(rsc)/./app/utils/finnhub.ts\");\n/* harmony import */ var _utils_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/cache */ \"(rsc)/./app/utils/cache.ts\");\n/* harmony import */ var _utils_stock_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/stock-api */ \"(rsc)/./app/utils/stock-api.ts\");\n\n\n\n\n// Helper function to extract the base symbol without exchange prefix\nfunction getBaseSymbol(symbol) {\n    return symbol.replace(/\\..+$/, \"\").toUpperCase();\n}\n// Mock volume analysis for fallback\nfunction mockVolumeAnalysis(symbol, timeframe) {\n    return {\n        symbol: symbol,\n        companyName: symbol,\n        timeSeriesData: Array(30).fill(0).map((_, i)=>({\n                date: new Date(Date.now() - i * 86400000).toISOString().split(\"T\")[0],\n                open: 100 + Math.random() * 10,\n                high: 105 + Math.random() * 10,\n                low: 95 + Math.random() * 10,\n                close: 100 + Math.random() * 10,\n                volume: 1000000 + Math.random() * 2000000,\n                percentageChange: Math.random() * 4 - 2,\n                direction: Math.random() > 0.5 ? \"up\" : \"down\"\n            })),\n        significantMoves: [],\n        isMockData: true\n    };\n}\nasync function GET(request) {\n    const { searchParams } = new URL(request.url);\n    const symbol = searchParams.get(\"symbol\")?.toUpperCase();\n    // Convert timeframe to the format expected by the stock API\n    const timeframeParam = searchParams.get(\"timeframe\") || \"3m\";\n    const timeframe = (()=>{\n        switch(timeframeParam){\n            case \"1w\":\n                return \"1w\";\n            case \"1m\":\n                return \"1mo\";\n            case \"3m\":\n                return \"3mo\";\n            case \"6m\":\n                return \"6mo\";\n            case \"1y\":\n                return \"1y\";\n            default:\n                return \"3mo\";\n        }\n    })();\n    const forceRefresh = searchParams.get(\"force\") === \"true\";\n    const useMock = searchParams.get(\"mock\") === \"true\"; // Parameter to explicitly request mock data\n    const disallowMock = searchParams.get(\"mock\") === \"false\"; // New parameter to disallow mock data\n    if (!symbol) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Symbol is required\"\n        }, {\n            status: 400\n        });\n    }\n    console.log(`Processing volume analysis request for ${symbol} with timeframe ${timeframe}${forceRefresh ? \" (forced refresh)\" : \"\"}${useMock ? \" (using mock data)\" : \"\"}${disallowMock ? \" (disallowing mock data)\" : \"\"}`);\n    // Get the base symbol without any exchange prefix\n    const baseSymbol = getBaseSymbol(symbol);\n    try {\n        // If mock data is explicitly requested, return it immediately\n        if (useMock) {\n            console.log(`Using mock data for ${symbol} volume analysis as explicitly requested`);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(mockVolumeAnalysis(symbol, timeframe));\n        }\n        // Skip cache check if a forced refresh is requested\n        if (!forceRefresh) {\n            // Check for cached data\n            const cachedData = _utils_cache__WEBPACK_IMPORTED_MODULE_2__.companyDataCache.get(baseSymbol);\n            if (cachedData?.timeSeriesData?.length) {\n                const cacheAge = Date.now() - (cachedData.lastUpdated || 0);\n                const maxAge = 3600000; // 1 hour\n                if (cacheAge < maxAge) {\n                    console.log(`Using cached volume analysis for ${symbol} (age: ${Math.round(cacheAge / 1000 / 60)} minutes)`);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                        symbol: baseSymbol,\n                        companyName: cachedData.name || baseSymbol,\n                        timeSeriesData: cachedData.timeSeriesData,\n                        significantMoves: cachedData.significantMoves || []\n                    });\n                } else {\n                    console.log(`Cached volume analysis for ${symbol} is stale (${Math.round(cacheAge / 1000 / 60)} minutes old)`);\n                }\n            }\n        } else {\n            console.log(`Forced refresh requested for ${symbol}, bypassing cache entirely`);\n        }\n        // Fetch new data\n        const stockData = await (0,_utils_stock_api__WEBPACK_IMPORTED_MODULE_3__.getStockData)(symbol, timeframe);\n        if (!stockData.timeSeriesData || stockData.timeSeriesData.length === 0) {\n            throw new Error(\"No time series data available\");\n        }\n        // Process the data to find significant price moves\n        const timeSeriesData = stockData.timeSeriesData;\n        const significantMoves = [];\n        // Find days with significant price and volume movement\n        for(let i = 0; i < timeSeriesData.length; i++){\n            const day = timeSeriesData[i];\n            // Significant move criteria: >2% price change AND volume > 1.5x 30-day average\n            if (Math.abs(day.percentageChange) > 2) {\n                // Calculate average volume for previous 30 days\n                let volumeSum = 0;\n                let count = 0;\n                for(let j = i + 1; j < Math.min(i + 31, timeSeriesData.length); j++){\n                    volumeSum += timeSeriesData[j].volume;\n                    count++;\n                }\n                const avgVolume = count > 0 ? volumeSum / count : day.volume;\n                // Check if volume is significantly higher than average\n                if (day.volume > avgVolume * 1.5) {\n                    // This is a significant move - get the previous close for reference\n                    const previousClose = i < timeSeriesData.length - 1 ? timeSeriesData[i + 1].close : day.open;\n                    // Format the date for news lookup\n                    const moveDate = new Date(day.date);\n                    const formattedDate = (0,_utils_finnhub__WEBPACK_IMPORTED_MODULE_1__.formatDateYYYYMMDD)(moveDate);\n                    // Get news around this date\n                    const newsItems = await (0,_utils_stock_api__WEBPACK_IMPORTED_MODULE_3__.getCompanyNewsWithFallback)(symbol, 3);\n                    // Filter news items around the move date (3 days before and after)\n                    const relevantNews = newsItems.filter((item)=>{\n                        const newsDate = new Date(item.date);\n                        const daysDiff = Math.abs((newsDate.getTime() - moveDate.getTime()) / (1000 * 60 * 60 * 24));\n                        return daysDiff <= 3;\n                    });\n                    // Add to significant moves\n                    significantMoves.push({\n                        date: day.date,\n                        volume: day.volume,\n                        price: day.close,\n                        priceChange: day.close - previousClose,\n                        percentageChange: day.percentageChange,\n                        previousClose: previousClose,\n                        high: day.high,\n                        low: day.low,\n                        news: relevantNews\n                    });\n                }\n            }\n        }\n        // Get company profile for additional info\n        const companyProfile = await (0,_utils_stock_api__WEBPACK_IMPORTED_MODULE_3__.getCompanyProfileWithFallback)(symbol);\n        // Construct the response\n        const response = {\n            symbol: baseSymbol,\n            companyName: companyProfile.name || baseSymbol,\n            timeSeriesData: timeSeriesData.map((day)=>({\n                    date: day.date,\n                    open: day.open,\n                    high: day.high,\n                    low: day.low,\n                    close: day.close,\n                    volume: day.volume,\n                    percentageChange: day.percentageChange,\n                    direction: day.percentageChange >= 0 ? \"up\" : \"down\"\n                })),\n            significantMoves: significantMoves,\n            refreshedAt: new Date().toISOString()\n        };\n        // Cache the results if this isn't a forced refresh\n        if (!forceRefresh) {\n            _utils_cache__WEBPACK_IMPORTED_MODULE_2__.companyDataCache.set(baseSymbol, {\n                name: baseSymbol,\n                symbol: baseSymbol,\n                timeSeriesData: timeSeriesData,\n                significantMoves: significantMoves,\n                lastUpdated: Date.now()\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(response);\n    } catch (error) {\n        console.error(`Error in volume analysis API route for ${symbol}:`, error);\n        // For forced refresh, we don't want to return either cached or mock data\n        if (forceRefresh) {\n            console.log(`Refresh failed for ${symbol}, returning error instead of fallback`);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: `Failed to refresh data: ${error instanceof Error ? error.message : \"Unknown error\"}`\n            }, {\n                status: 503\n            });\n        }\n        // Try cache as fallback if not forcing refresh\n        const cachedData = _utils_cache__WEBPACK_IMPORTED_MODULE_2__.companyDataCache.get(baseSymbol);\n        if (cachedData?.timeSeriesData?.length) {\n            console.log(`Using cached volume analysis for ${symbol} as fallback after error`);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                symbol: baseSymbol,\n                companyName: cachedData.name || baseSymbol,\n                timeSeriesData: cachedData.timeSeriesData,\n                significantMoves: cachedData.significantMoves || [],\n                fromCache: true,\n                cacheTimestamp: cachedData.lastUpdated\n            });\n        }\n        // Use mock data as last resort, but only if not explicitly disallowed\n        if (!disallowMock) {\n            console.log(`Using mock data for ${symbol} volume analysis as last resort`);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(mockVolumeAnalysis(symbol, timeframe));\n        }\n        // If we get here, we couldn't provide any data\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: `Failed to fetch volume analysis data: ${error instanceof Error ? error.message : \"Unknown error\"}`\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/volume-analysis/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/alphavantage.ts":
/*!***********************************!*\
  !*** ./app/utils/alphavantage.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDailyTimeSeries: () => (/* binding */ getDailyTimeSeries)\n/* harmony export */ });\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ \"(rsc)/./app/utils/cache.ts\");\nconst ALPHA_VANTAGE_API_KEY = process.env.ALPHA_VANTAGE_API_KEY;\nconst BASE_URL = \"https://www.alphavantage.co/query\";\n\nif (!ALPHA_VANTAGE_API_KEY) {\n    console.error(\"ALPHA_VANTAGE_API_KEY is not set in environment variables\");\n}\n// Generate 90 days of mock data with more significant price movements\nconst MOCK_DATA = Array.from({\n    length: 90\n}, (_, i)=>{\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    // Base values with more dramatic variations\n    const basePrice = 182.50;\n    const volatility = 5.0; // Increased volatility\n    // Generate more dramatic price movements\n    const randomChange = (Math.random() - 0.5) * volatility * 2; // Double the potential change\n    const open = basePrice + randomChange;\n    const high = open + Math.random() * volatility * 1.5;\n    const low = open - Math.random() * volatility * 1.5;\n    const close = (open + high + low) / 3 + (Math.random() - 0.5) * volatility;\n    // Generate volume with occasional spikes\n    const baseVolume = 45000000;\n    const volumeSpike = Math.random() < 0.2 ? 3 : 1; // 20% chance of volume spike\n    const volume = Math.floor(baseVolume + Math.random() * 15000000 * volumeSpike);\n    const percentageChange = (close - open) / open * 100;\n    return {\n        date: date.toISOString().split(\"T\")[0],\n        open: Number(open.toFixed(2)),\n        high: Number(high.toFixed(2)),\n        low: Number(low.toFixed(2)),\n        close: Number(close.toFixed(2)),\n        volume: volume,\n        percentageChange: Number(percentageChange.toFixed(2)),\n        direction: percentageChange >= 0 ? \"up\" : \"down\"\n    };\n});\nasync function makeRequest(url) {\n    console.log(\"Making Alpha Vantage API request:\", url.replace(process.env.ALPHA_VANTAGE_API_KEY || \"\", \"[API_KEY]\"));\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            console.error(\"Alpha Vantage API error:\", response.status, response.statusText);\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Alpha Vantage API response structure:\", Object.keys(data));\n        return data;\n    } catch (error) {\n        console.error(\"Error in Alpha Vantage makeRequest:\", error);\n        throw error;\n    }\n}\nasync function getDailyTimeSeries(symbol, timeframe = \"3m\") {\n    try {\n        console.log(`Getting daily data for ${symbol} with timeframe ${timeframe}`);\n        // Check if we have cached data for this symbol/timeframe\n        const cachedData = _cache__WEBPACK_IMPORTED_MODULE_0__.companyDataCache.get(symbol);\n        // Use TIME_SERIES_DAILY API endpoint to get historical data\n        const outputSize = timeframe === \"1y\" || timeframe === \"5y\" ? \"full\" : \"compact\";\n        const url = `${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${symbol}&outputsize=${outputSize}&apikey=${ALPHA_VANTAGE_API_KEY}`;\n        try {\n            const data = await makeRequest(url);\n            // Check for rate limiting\n            if (data.Information?.includes(\"API rate limit\")) {\n                console.log(\"API rate limited, using cached data if available\");\n                (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(true);\n                // If we have cached data, use it\n                if (cachedData?.timeSeriesData?.length) {\n                    console.log(`Using cached data for ${symbol}`);\n                    return {\n                        allDailyData: cachedData.timeSeriesData,\n                        significantPriceMoves: cachedData.significantMoves\n                    };\n                }\n                // Otherwise fall back to mock data\n                console.log(\"No cached data available, using mock data\");\n                return processVolumeData(MOCK_DATA);\n            }\n            // Reset rate limited flag when we successfully get data\n            (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(false);\n            if (!data[\"Time Series (Daily)\"]) {\n                console.error(\"Invalid Alpha Vantage response structure:\", data);\n                // Check for cached data before falling back to mock\n                if (cachedData?.timeSeriesData?.length) {\n                    console.log(`Using cached data for ${symbol}`);\n                    return {\n                        allDailyData: cachedData.timeSeriesData,\n                        significantPriceMoves: cachedData.significantMoves\n                    };\n                }\n                console.log(\"Falling back to mock data\");\n                return processVolumeData(MOCK_DATA);\n            }\n            const timeSeriesData = data[\"Time Series (Daily)\"];\n            const daysToInclude = getTimeframeDays(timeframe);\n            // Process historical data\n            const processedData = Object.entries(timeSeriesData).map(([date, values])=>{\n                const open = parseFloat(values[\"1. open\"]);\n                const close = parseFloat(values[\"4. close\"]);\n                const percentageChange = (close - open) / open * 100;\n                return {\n                    date,\n                    open,\n                    high: parseFloat(values[\"2. high\"]),\n                    low: parseFloat(values[\"3. low\"]),\n                    close,\n                    volume: parseInt(values[\"5. volume\"], 10),\n                    percentageChange: Number(percentageChange.toFixed(2)),\n                    direction: percentageChange >= 0 ? \"up\" : \"down\"\n                };\n            })// Sort by date descending (most recent first)\n            .sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime())// Limit to the number of days needed for the timeframe\n            .slice(0, daysToInclude);\n            console.log(`Successfully processed ${processedData.length} days of time series data`);\n            // Process the data\n            const result = processVolumeData(processedData);\n            // Cache the successful result\n            _cache__WEBPACK_IMPORTED_MODULE_0__.companyDataCache.set(symbol, {\n                timeSeriesData: result.allDailyData,\n                significantMoves: result.significantPriceMoves\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error fetching from Alpha Vantage:\", error);\n            // Set rate limited flag as this might be a rate limit error\n            (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(true);\n            // Check for cached data before falling back to mock\n            if (cachedData?.timeSeriesData?.length) {\n                console.log(`Using cached data for ${symbol}`);\n                return {\n                    allDailyData: cachedData.timeSeriesData,\n                    significantPriceMoves: cachedData.significantMoves\n                };\n            }\n            return processVolumeData(MOCK_DATA);\n        }\n    } catch (error) {\n        console.error(\"Error in getDailyTimeSeries:\", error);\n        // Check for cached data before falling back to mock\n        const cachedData = _cache__WEBPACK_IMPORTED_MODULE_0__.companyDataCache.get(symbol);\n        if (cachedData?.timeSeriesData?.length) {\n            console.log(`Using cached data for ${symbol}`);\n            return {\n                allDailyData: cachedData.timeSeriesData,\n                significantPriceMoves: cachedData.significantMoves\n            };\n        }\n        return processVolumeData(MOCK_DATA);\n    }\n}\nfunction calculateImpactScore(data) {\n    // Find max values for normalization\n    const maxVolume = Math.max(...data.map((day)=>day.volume));\n    const maxAbsPercentChange = Math.max(...data.map((day)=>Math.abs(day.percentageChange)));\n    return data.map((day)=>({\n            ...day,\n            impactScore: // Normalize and weight percentage change (weight: 3)\n            3 * Math.abs(day.percentageChange) / maxAbsPercentChange + // Normalize and weight volume (weight: 2)\n            2 * day.volume / maxVolume\n        }));\n}\nfunction processVolumeData(data) {\n    // Sort by date descending to ensure consistent order\n    const allDailyData = [\n        ...data\n    ].sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n    // Calculate impact scores for all days\n    const daysWithImpactScores = calculateImpactScore(allDailyData);\n    // Get top 5 days by impact score\n    const significantPriceMoves = daysWithImpactScores.sort((a, b)=>(b.impactScore || 0) - (a.impactScore || 0)).slice(0, 5);\n    return {\n        allDailyData: daysWithImpactScores,\n        significantPriceMoves\n    };\n}\nfunction getTimeframeDays(timeframe) {\n    switch(timeframe){\n        case \"1w\":\n            return 7;\n        case \"1m\":\n            return 30;\n        case \"3m\":\n            return 90;\n        case \"1y\":\n            return 365;\n        case \"5y\":\n            return 1825;\n        default:\n            return 90; // Default to 3 months\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/alphavantage.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/cache.ts":
/*!****************************!*\
  !*** ./app/utils/cache.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit),\n/* harmony export */   companyDataCache: () => (/* binding */ companyDataCache),\n/* harmony export */   isRateLimited: () => (/* binding */ isRateLimited),\n/* harmony export */   rateLimitedUntil: () => (/* binding */ rateLimitedUntil),\n/* harmony export */   setRateLimited: () => (/* binding */ setRateLimited)\n/* harmony export */ });\n// Cache utility for storing company data with improved expiration and storage strategies\n// Enhanced LRU cache for company data with expiration times and priority levels\nclass CompanyDataCache {\n    constructor(maxSize = 20){\n        this.cache = new Map();\n        this.maxSize = maxSize;\n        this.accessOrder = [];\n        this.storageAvailable =  false && 0;\n        // Load cache from localStorage if available\n        if (this.storageAvailable) {\n            this.loadFromStorage();\n            // Set up periodic cleanup of expired items\n            setInterval(()=>this.cleanupExpired(), 60000); // Check every minute\n        }\n    }\n    // Get company data from cache\n    get(symbol) {\n        // First check memory cache\n        let data = this.cache.get(symbol);\n        // If not in memory cache but storage is available, try to load from localStorage\n        if (!data && this.storageAvailable) {\n            data = this.loadItemFromStorage(symbol);\n            if (data) {\n                this.cache.set(symbol, data);\n            }\n        }\n        if (data) {\n            // Check if data is expired\n            if (data.expiresAt && data.expiresAt < Date.now()) {\n                console.log(`Cache expired for ${symbol}`);\n                // Keep but mark as stale by moving to end of access order\n                this.accessOrder = this.accessOrder.filter((s)=>s !== symbol);\n                this.accessOrder.push(symbol);\n                return undefined;\n            }\n            // Update access order (move to front)\n            this.accessOrder = this.accessOrder.filter((s)=>s !== symbol);\n            this.accessOrder.unshift(symbol);\n        }\n        return data;\n    }\n    // Store company data in cache\n    set(symbol, data, options = {}) {\n        // Get existing data or create new entry\n        const existingData = this.cache.get(symbol) || {\n            symbol,\n            name: \"\",\n            timeSeriesData: [],\n            significantMoves: [],\n            companyInfo: null,\n            lastUpdated: Date.now(),\n            expiresAt: Date.now() + 24 * 60 * 60 * 1000 // Default 24 hours\n        };\n        // Calculate expiration based on data type and provided options\n        let expirationTime = options.expirationTime;\n        if (!expirationTime) {\n            // Default expiration times based on data type\n            if (data.companyInfo) {\n                // Company profiles change rarely - cache for 7 days\n                expirationTime = 7 * 24 * 60 * 60 * 1000;\n            } else if (data.timeSeriesData && data.timeSeriesData.length > 0) {\n                // Price data - cache for 1 hour during market hours, longer after market close\n                const now = new Date();\n                const isMarketHours = now.getUTCHours() >= 13 && now.getUTCHours() < 20 && // 9AM-4PM ET\n                now.getUTCDay() > 0 && now.getUTCDay() < 6; // Mon-Fri\n                expirationTime = isMarketHours ? 60 * 60 * 1000 : 12 * 60 * 60 * 1000;\n            } else {\n                // Other data - default 24 hours\n                expirationTime = 24 * 60 * 60 * 1000;\n            }\n        }\n        // Merge new data with existing\n        const updatedData = {\n            ...existingData,\n            ...data,\n            lastUpdated: Date.now(),\n            expiresAt: Date.now() + expirationTime\n        };\n        // Store updated data\n        this.cache.set(symbol, updatedData);\n        // Update access order\n        this.accessOrder = this.accessOrder.filter((s)=>s !== symbol);\n        this.accessOrder.unshift(symbol);\n        // Save to localStorage if available\n        if (this.storageAvailable) {\n            this.saveItemToStorage(symbol, updatedData);\n        }\n        // Remove oldest entry if cache exceeds max size\n        if (this.accessOrder.length > this.maxSize) {\n            const oldest = this.accessOrder.pop();\n            if (oldest) {\n                this.cache.delete(oldest);\n                if (this.storageAvailable) {\n                    this.removeItemFromStorage(oldest);\n                }\n            }\n        }\n    }\n    // Clean up expired items\n    cleanupExpired() {\n        const now = Date.now();\n        Array.from(this.cache.entries()).forEach(([symbol, data])=>{\n            if (data.expiresAt && data.expiresAt < now) {\n                console.log(`Auto cleaning expired cache for ${symbol}`);\n            // We don't immediately remove expired items; they'll be removed when they're\n            // at the end of the access order and the cache reaches max size\n            }\n        });\n    }\n    // Save cache to localStorage\n    saveToStorage() {\n        try {\n            // Only store the most recently used items to avoid storage limits\n            const topItems = this.accessOrder.slice(0, 10);\n            const storageData = topItems.map((symbol)=>{\n                const data = this.cache.get(symbol);\n                return [\n                    symbol,\n                    data\n                ];\n            });\n            localStorage.setItem(\"companyDataCache\", JSON.stringify(storageData));\n        } catch (error) {\n            console.error(\"Failed to save cache to localStorage:\", error);\n        }\n    }\n    // Save single item to storage\n    saveItemToStorage(symbol, data) {\n        try {\n            localStorage.setItem(`companyCache_${symbol}`, JSON.stringify(data));\n        } catch (error) {\n            console.error(`Failed to save ${symbol} cache to localStorage:`, error);\n        }\n    }\n    // Remove item from storage\n    removeItemFromStorage(symbol) {\n        try {\n            localStorage.removeItem(`companyCache_${symbol}`);\n        } catch (error) {\n            console.error(`Failed to remove ${symbol} from localStorage:`, error);\n        }\n    }\n    // Load cache from localStorage\n    loadFromStorage() {\n        try {\n            // Load individual stocks (more reliable than bulk loading)\n            const keys = Object.keys(localStorage);\n            const cacheKeys = keys.filter((key)=>key.startsWith(\"companyCache_\"));\n            for (const key of cacheKeys){\n                const symbol = key.replace(\"companyCache_\", \"\");\n                this.loadItemFromStorage(symbol);\n            }\n        } catch (error) {\n            console.error(\"Failed to load cache from localStorage:\", error);\n        }\n    }\n    // Load individual item from storage\n    loadItemFromStorage(symbol) {\n        try {\n            const dataStr = localStorage.getItem(`companyCache_${symbol}`);\n            if (dataStr) {\n                const data = JSON.parse(dataStr);\n                this.cache.set(symbol, data);\n                // Update access order without triggering cleanup\n                this.accessOrder = this.accessOrder.filter((s)=>s !== symbol);\n                this.accessOrder.push(symbol);\n                return data;\n            }\n        } catch (error) {\n            console.error(`Failed to load ${symbol} from localStorage:`, error);\n        }\n        return undefined;\n    }\n    // Get all cached company data sorted by last access\n    getAll() {\n        return this.accessOrder.map((symbol)=>this.cache.get(symbol)).filter(Boolean);\n    }\n    // Get all valid (non-expired) cached company data \n    getAllValid() {\n        const now = Date.now();\n        return this.accessOrder.map((symbol)=>this.cache.get(symbol)).filter((data)=>data && (!data.expiresAt || data.expiresAt > now));\n    }\n    // Check if company exists in cache and is not expired\n    has(symbol) {\n        const data = this.cache.get(symbol);\n        if (!data) return false;\n        if (data.expiresAt && data.expiresAt < Date.now()) return false;\n        return true;\n    }\n    // Check if company exists in cache (even if expired)\n    hasExpired(symbol) {\n        const data = this.cache.get(symbol);\n        return !!data && data.expiresAt < Date.now();\n    }\n    // Get count of cached companies\n    get size() {\n        return this.cache.size;\n    }\n    // Check how much time is left before expiration\n    getTimeToExpiration(symbol) {\n        const data = this.cache.get(symbol);\n        if (!data || !data.expiresAt) return 0;\n        return Math.max(0, data.expiresAt - Date.now());\n    }\n}\n// Create singleton instance with larger capacity\nconst companyDataCache = new CompanyDataCache(20);\n// Function to detect if APIs are rate limited\nlet isRateLimited = false;\nlet rateLimitedUntil = 0;\nfunction setRateLimited(limited, durationMs = 60 * 60 * 1000) {\n    isRateLimited = limited;\n    if (limited) {\n        rateLimitedUntil = Date.now() + durationMs;\n    } else {\n        rateLimitedUntil = 0;\n    }\n    // Store rate limit status to session storage to persist across page refreshes\n    if (false) {}\n}\nfunction checkRateLimit() {\n    if (rateLimitedUntil > 0 && Date.now() > rateLimitedUntil) {\n        // Rate limit period has expired\n        setRateLimited(false);\n    }\n    return isRateLimited;\n}\n// Initialize rate limit status from session storage\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/cache.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/finnhub.ts":
/*!******************************!*\
  !*** ./app/utils/finnhub.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeWebSocket: () => (/* binding */ closeWebSocket),\n/* harmony export */   connectWebSocket: () => (/* binding */ connectWebSocket),\n/* harmony export */   formatDateYYYYMMDD: () => (/* binding */ formatDateYYYYMMDD),\n/* harmony export */   getCompanyNews: () => (/* binding */ getCompanyNews),\n/* harmony export */   getCompanyProfile: () => (/* binding */ getCompanyProfile),\n/* harmony export */   getStockCandles: () => (/* binding */ getStockCandles),\n/* harmony export */   getTimeframeTimestamps: () => (/* binding */ getTimeframeTimestamps),\n/* harmony export */   searchSymbol: () => (/* binding */ searchSymbol),\n/* harmony export */   subscribeToSymbol: () => (/* binding */ subscribeToSymbol),\n/* harmony export */   unsubscribeFromSymbol: () => (/* binding */ unsubscribeFromSymbol)\n/* harmony export */ });\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ \"(rsc)/./app/utils/cache.ts\");\nconst FINNHUB_API_KEY = process.env.FINNHUB_API_KEY;\nconst BASE_URL = \"https://finnhub.io/api/v1\";\n\nif (!FINNHUB_API_KEY) {\n    console.error(\"FINNHUB_API_KEY is not set in environment variables\");\n}\nasync function makeRequest(url) {\n    console.log(\"Making Finnhub API request:\", url);\n    try {\n        const response = await fetch(url);\n        // Check for rate limiting by status code\n        if (response.status === 429) {\n            console.error(\"Finnhub API rate limit reached\");\n            (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(true);\n            throw new Error(\"Rate limit reached\");\n        }\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        // Reset rate limited flag when we successfully get data\n        (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(false);\n        console.log(\"Finnhub API response:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error making Finnhub API request:\", error);\n        if (error.message === \"Rate limit reached\") {\n            throw error; // Re-throw to handle it in the calling function\n        }\n        // For other errors, let's assume API might be having issues\n        (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(true);\n        throw error;\n    }\n}\nasync function getStockCandles(symbol, from, to, resolution = \"D\") {\n    const url = `${BASE_URL}/stock/candle?symbol=${symbol}&resolution=${resolution}&from=${from}&to=${to}&token=${FINNHUB_API_KEY}`;\n    return makeRequest(url);\n}\nasync function getCompanyProfile(symbol) {\n    try {\n        // Try to get from cache first if rate limited\n        const cachedData = _cache__WEBPACK_IMPORTED_MODULE_0__.companyDataCache.get(symbol);\n        if (cachedData?.companyInfo) {\n            console.log(`Using cached company info for ${symbol}`);\n            return cachedData.companyInfo;\n        }\n        const url = `${BASE_URL}/stock/profile2?symbol=${symbol}&token=${FINNHUB_API_KEY}`;\n        const data = await makeRequest(url);\n        // Cache the company info\n        if (data && data.name) {\n            _cache__WEBPACK_IMPORTED_MODULE_0__.companyDataCache.set(symbol, {\n                name: data.name,\n                companyInfo: data\n            });\n        }\n        return data;\n    } catch (error) {\n        console.error(`Error getting company profile for ${symbol}:`, error);\n        // If we have cached data, use it\n        const cachedData = _cache__WEBPACK_IMPORTED_MODULE_0__.companyDataCache.get(symbol);\n        if (cachedData?.companyInfo) {\n            console.log(`Using cached company info for ${symbol}`);\n            return cachedData.companyInfo;\n        }\n        // Otherwise throw the error\n        throw error;\n    }\n}\nasync function getCompanyNews(symbol, from, to) {\n    try {\n        const url = `${BASE_URL}/company-news?symbol=${symbol}&from=${from}&to=${to}&token=${FINNHUB_API_KEY}`;\n        return makeRequest(url);\n    } catch (error) {\n        console.error(`Error getting company news for ${symbol}:`, error);\n        // Return empty array on error rather than throwing\n        return [];\n    }\n}\nasync function searchSymbol(query) {\n    const url = `${BASE_URL}/search?q=${query}&token=${FINNHUB_API_KEY}`;\n    const data = await makeRequest(url);\n    return data.result || [];\n}\nfunction getTimeframeTimestamps(timeframe) {\n    const now = new Date();\n    const to = Math.floor(now.getTime() / 1000);\n    let from;\n    switch(timeframe){\n        case \"1w\":\n            from = to - 7 * 24 * 60 * 60;\n            break;\n        case \"1m\":\n            from = to - 30 * 24 * 60 * 60;\n            break;\n        case \"3m\":\n            from = to - 90 * 24 * 60 * 60;\n            break;\n        case \"1y\":\n            from = to - 365 * 24 * 60 * 60;\n            break;\n        case \"5y\":\n            from = to - 5 * 365 * 24 * 60 * 60;\n            break;\n        default:\n            from = to - 30 * 24 * 60 * 60;\n    }\n    return {\n        from,\n        to\n    };\n}\nfunction formatDateYYYYMMDD(date) {\n    return date.toISOString().split(\"T\")[0];\n}\nlet ws = null;\nlet subscribers = new Map();\nlet pendingSubscriptions = new Set();\nlet isConnecting = false;\nfunction connectWebSocket() {\n    if (ws?.readyState === WebSocket.OPEN) {\n        return Promise.resolve(ws);\n    }\n    if (isConnecting) {\n        return new Promise((resolve)=>{\n            const checkConnection = setInterval(()=>{\n                if (ws?.readyState === WebSocket.OPEN) {\n                    clearInterval(checkConnection);\n                    resolve(ws);\n                }\n            }, 100);\n        });\n    }\n    isConnecting = true;\n    return new Promise((resolve, reject)=>{\n        ws = new WebSocket(`wss://ws.finnhub.io?token=${FINNHUB_API_KEY}`);\n        ws.onopen = ()=>{\n            console.log(\"Finnhub WebSocket connected\");\n            isConnecting = false;\n            // Subscribe to any pending symbols\n            pendingSubscriptions.forEach((symbol)=>{\n                ws?.send(JSON.stringify({\n                    type: \"subscribe\",\n                    symbol\n                }));\n            });\n            pendingSubscriptions.clear();\n            resolve(ws);\n        };\n        ws.onmessage = (event)=>{\n            const message = JSON.parse(event.data);\n            if (message.type === \"trade\") {\n                message.data.forEach((trade)=>{\n                    const symbol = trade.s;\n                    const callbacks = subscribers.get(symbol);\n                    if (callbacks) {\n                        callbacks.forEach((callback)=>callback(trade));\n                    }\n                });\n            }\n        };\n        ws.onerror = (error)=>{\n            console.error(\"Finnhub WebSocket error:\", error);\n            isConnecting = false;\n            reject(error);\n        };\n        ws.onclose = ()=>{\n            console.log(\"Finnhub WebSocket connection closed\");\n            isConnecting = false;\n            ws = null;\n            // Keep track of current subscriptions for reconnection\n            subscribers.forEach((_, symbol)=>{\n                pendingSubscriptions.add(symbol);\n            });\n        };\n    });\n}\nasync function subscribeToSymbol(symbol, callback) {\n    try {\n        const socket = await connectWebSocket();\n        if (!subscribers.has(symbol)) {\n            subscribers.set(symbol, new Set());\n            socket.send(JSON.stringify({\n                type: \"subscribe\",\n                symbol\n            }));\n        }\n        subscribers.get(symbol)?.add(callback);\n    } catch (error) {\n        console.error(`Error subscribing to ${symbol}:`, error);\n    }\n}\nasync function unsubscribeFromSymbol(symbol, callback) {\n    if (!ws || ws.readyState !== WebSocket.OPEN) return;\n    try {\n        if (callback) {\n            subscribers.get(symbol)?.delete(callback);\n            if (subscribers.get(symbol)?.size === 0) {\n                ws.send(JSON.stringify({\n                    type: \"unsubscribe\",\n                    symbol\n                }));\n                subscribers.delete(symbol);\n                pendingSubscriptions.delete(symbol);\n            }\n        } else {\n            ws.send(JSON.stringify({\n                type: \"unsubscribe\",\n                symbol\n            }));\n            subscribers.delete(symbol);\n            pendingSubscriptions.delete(symbol);\n        }\n    } catch (error) {\n        console.error(`Error unsubscribing from ${symbol}:`, error);\n    }\n}\nfunction closeWebSocket() {\n    if (ws) {\n        subscribers.clear();\n        pendingSubscriptions.clear();\n        ws.close();\n        ws = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/finnhub.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/request-queue.ts":
/*!************************************!*\
  !*** ./app/utils/request-queue.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIRequestQueue: () => (/* binding */ APIRequestQueue),\n/* harmony export */   alphaVantageQueue: () => (/* binding */ alphaVantageQueue),\n/* harmony export */   finnhubQueue: () => (/* binding */ finnhubQueue)\n/* harmony export */ });\n/**\n * Smart request queue to handle API rate limits\n * This provides a centralized way to manage API requests and respect rate limits\n */ class APIRequestQueue {\n    /**\n   * Creates a new request queue\n   * @param name Identifier for this queue (for logging)\n   * @param requestsPerMinute Maximum requests allowed per minute\n   * @param minDelayMs Minimum delay between requests (in milliseconds)\n   */ constructor(name, requestsPerMinute = 5, minDelayMs = 200){\n        this.queue = [];\n        this.processing = false;\n        this.lastRequestTime = 0;\n        this.name = name;\n        this.requestsPerMinute = requestsPerMinute;\n        this.minDelayMs = minDelayMs;\n        // Initialize processing state\n        this.processing = false;\n    }\n    /**\n   * Add a request to the queue with the specified priority\n   * @param requestFn Function that executes the API request\n   * @param priority Priority level (higher = more important)\n   * @returns Promise that resolves with the result of the request\n   */ enqueue(requestFn, priority = 1) {\n        return new Promise((resolve, reject)=>{\n            // Create a request object\n            const request = {\n                execute: requestFn,\n                resolve,\n                reject,\n                priority,\n                timestamp: Date.now()\n            };\n            // Add to queue\n            this.queue.push(request);\n            // Sort queue by priority (higher first) then by timestamp (older first)\n            this.queue.sort((a, b)=>{\n                if (a.priority !== b.priority) {\n                    return b.priority - a.priority; // Higher priority first\n                }\n                return a.timestamp - b.timestamp; // Older requests first\n            });\n            // Start processing if not already doing so\n            if (!this.processing) {\n                this.processQueue();\n            }\n        });\n    }\n    /**\n   * Process the next request in the queue\n   */ async processQueue() {\n        if (this.queue.length === 0) {\n            this.processing = false;\n            return;\n        }\n        this.processing = true;\n        // Calculate delay based on rate limit\n        const timeSinceLastRequest = Date.now() - this.lastRequestTime;\n        const delay = Math.max(this.minDelayMs, 60000 / this.requestsPerMinute - timeSinceLastRequest);\n        // Wait if needed\n        if (delay > 0) {\n            await new Promise((resolve)=>setTimeout(resolve, delay));\n        }\n        // Get the next request\n        const request = this.queue.shift();\n        if (!request) {\n            this.processQueue();\n            return;\n        }\n        // Log request if timeout is significant\n        if (delay > 500) {\n            console.log(`[${this.name}] Executing request after ${delay}ms delay (${this.queue.length} remaining)`);\n        }\n        // Execute the request\n        try {\n            this.lastRequestTime = Date.now();\n            const result = await request.execute();\n            request.resolve(result);\n        } catch (error) {\n            // Check if it's a rate limit error\n            if (error && (typeof error === \"object\" && \"message\" in error && (String(error.message).toLowerCase().includes(\"rate limit\") || String(error.message).toLowerCase().includes(\"too many requests\")) || typeof error === \"string\" && (error.toLowerCase().includes(\"rate limit\") || error.toLowerCase().includes(\"too many requests\")))) {\n                console.warn(`[${this.name}] Rate limit hit, adding request back to queue with delay`);\n                // Wait longer and retry this request with higher priority\n                setTimeout(()=>{\n                    this.enqueue(request.execute, request.priority + 1);\n                }, 10000); // 10 second delay before retrying\n                request.reject(new Error(`Rate limit hit for ${this.name} API`));\n            } else {\n                // If it's not a rate limit error, just reject normally\n                request.reject(error);\n            }\n        }\n        // Process the next request\n        this.processQueue();\n    }\n    /**\n   * Get the current queue length\n   */ get length() {\n        return this.queue.length;\n    }\n    /**\n   * Check if the queue is currently busy\n   */ get isBusy() {\n        return this.processing;\n    }\n    /**\n   * Clear all pending requests\n   */ clear() {\n        const count = this.queue.length;\n        this.queue.forEach((request)=>{\n            request.reject(new Error(\"Queue cleared\"));\n        });\n        this.queue = [];\n        return count;\n    }\n}\n// Create singleton instances for different APIs\nconst finnhubQueue = new APIRequestQueue(\"Finnhub\", 30, 200); // 30 requests/minute\nconst alphaVantageQueue = new APIRequestQueue(\"AlphaVantage\", 5, 500); // 5 requests/minute \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/request-queue.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/retry-helper.ts":
/*!***********************************!*\
  !*** ./app/utils/retry-helper.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiQueue: () => (/* binding */ ApiQueue),\n/* harmony export */   isRateLimitError: () => (/* binding */ isRateLimitError),\n/* harmony export */   retryWhenRateLimited: () => (/* binding */ retryWhenRateLimited),\n/* harmony export */   retryWithBackoff: () => (/* binding */ retryWithBackoff)\n/* harmony export */ });\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ \"(rsc)/./app/utils/cache.ts\");\n/**\n * Retry Helper Utility\n * \n * This utility provides functions to help with API retries and\n * handling rate limiting more gracefully\n */ \n/**\n * Check if an error is related to rate limiting\n */ function isRateLimitError(error) {\n    if (!error) return false;\n    // Convert error to string for consistent checking\n    const errorStr = (typeof error === \"object\" ? error.message || error.toString() : String(error)).toLowerCase();\n    // Check for common rate limit indicators\n    return errorStr.includes(\"rate limit\") || errorStr.includes(\"too many requests\") || errorStr.includes(\"429\") || errorStr.includes(\"quota exceeded\") || errorStr.includes(\"api calls exceeded\") || errorStr.includes(\"please slow down\");\n}\n/**\n * Sleep for a given number of milliseconds\n */ const sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n/**\n * Retry a function with exponential backoff\n */ async function retryWithBackoff(fn, options = {}) {\n    const { maxRetries = 3, initialDelayMs = 1000, maxDelayMs = 30000, backoffFactor = 2, retryCondition = (error)=>true, onRetry = ()=>{} } = options;\n    let lastError;\n    let delay = initialDelayMs;\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            return await fn();\n        } catch (error) {\n            lastError = error;\n            // Check if we should retry\n            if (!retryCondition(error) || attempt === maxRetries) {\n                throw error;\n            }\n            // Calculate next delay with exponential backoff\n            delay = Math.min(delay * backoffFactor, maxDelayMs);\n            // Add some jitter to prevent thundering herd\n            const jitter = Math.random() * 200 - 100; // ±100ms\n            const finalDelay = delay + jitter;\n            // Notify callback\n            onRetry(attempt, finalDelay);\n            // Wait before retrying\n            await sleep(finalDelay);\n        }\n    }\n    throw lastError;\n}\n/**\n * Retry a function specifically when rate limited\n */ async function retryWhenRateLimited(fn, options = {}) {\n    const { maxRetries = 3, initialDelayMs = 2000, maxDelayMs = 60000, onRetry = ()=>{} } = options;\n    try {\n        return await retryWithBackoff(fn, {\n            maxRetries,\n            initialDelayMs,\n            maxDelayMs,\n            backoffFactor: 3,\n            retryCondition: (error)=>{\n                const isRateLimit = isRateLimitError(error);\n                if (isRateLimit) {\n                    (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(true);\n                }\n                return isRateLimit;\n            },\n            onRetry: (attempt, delay)=>{\n                onRetry(attempt, delay);\n            }\n        });\n    } catch (error) {\n        // If we failed due to rate limiting, ensure the flag is set\n        if (isRateLimitError(error)) {\n            (0,_cache__WEBPACK_IMPORTED_MODULE_0__.setRateLimited)(true);\n        }\n        throw error;\n    }\n}\n/**\n * Queue for rate-limited API calls\n */ class ApiQueue {\n    constructor(callsPerSecond){\n        this.queue = [];\n        this.processing = false;\n        this.lastCallTime = 0;\n        this.minDelayMs = 1000 / callsPerSecond;\n    }\n    async add(fn) {\n        return new Promise((resolve, reject)=>{\n            this.queue.push(async ()=>{\n                try {\n                    // Ensure minimum delay between calls\n                    const now = Date.now();\n                    const timeSinceLastCall = now - this.lastCallTime;\n                    if (timeSinceLastCall < this.minDelayMs) {\n                        await sleep(this.minDelayMs - timeSinceLastCall);\n                    }\n                    const result = await fn();\n                    this.lastCallTime = Date.now();\n                    resolve(result);\n                } catch (error) {\n                    reject(error);\n                }\n            });\n            this.process();\n        });\n    }\n    async process() {\n        if (this.processing || this.queue.length === 0) return;\n        this.processing = true;\n        while(this.queue.length > 0){\n            const task = this.queue.shift();\n            if (task) {\n                await task();\n            }\n        }\n        this.processing = false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/retry-helper.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/stock-api.ts":
/*!********************************!*\
  !*** ./app/utils/stock-api.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROVIDERS: () => (/* binding */ PROVIDERS),\n/* harmony export */   getCompanyNewsWithFallback: () => (/* binding */ getCompanyNewsWithFallback),\n/* harmony export */   getCompanyProfileWithFallback: () => (/* binding */ getCompanyProfileWithFallback),\n/* harmony export */   getStockData: () => (/* binding */ getStockData),\n/* harmony export */   resetConfig: () => (/* binding */ resetConfig),\n/* harmony export */   updateConfig: () => (/* binding */ updateConfig)\n/* harmony export */ });\n/* harmony import */ var _finnhub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./finnhub */ \"(rsc)/./app/utils/finnhub.ts\");\n/* harmony import */ var _alphavantage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alphavantage */ \"(rsc)/./app/utils/alphavantage.ts\");\n/* harmony import */ var _request_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request-queue */ \"(rsc)/./app/utils/request-queue.ts\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cache */ \"(rsc)/./app/utils/cache.ts\");\n/* harmony import */ var _retry_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./retry-helper */ \"(rsc)/./app/utils/retry-helper.ts\");\n/**\n * Unified Stock API Client with Fallback Mechanisms\n * \n * This file provides a unified interface for fetching stock data from multiple providers,\n * with automatic fallback between Finnhub and Alpha Vantage.\n */ \n\n\n\n\n// ===== Configuration =====\nconst PROVIDERS = {\n    ALPHA_VANTAGE: {\n        name: \"AlphaVantage\",\n        priority: 1\n    },\n    FINNHUB: {\n        name: \"Finnhub\",\n        priority: 2\n    }\n};\n// Default configuration\nconst defaultConfig = {\n    preferredOHLCProvider: PROVIDERS.FINNHUB,\n    preferredNewsProvider: PROVIDERS.FINNHUB,\n    enableFallback: true,\n    cacheResults: true,\n    logApiCalls: true,\n    alphaVantageConfig: {\n        apiKey: process.env.ALPHA_VANTAGE_API_KEY || \"\"\n    },\n    finnhubConfig: {\n        apiKey: process.env.FINNHUB_API_KEY || \"\"\n    }\n};\n// Current configuration (mutable)\nlet currentConfig = {\n    ...defaultConfig\n};\n// Configuration functions\nfunction updateConfig(newConfig) {\n    currentConfig = {\n        ...currentConfig,\n        ...newConfig\n    };\n}\nfunction resetConfig() {\n    currentConfig = {\n        ...defaultConfig\n    };\n}\n// ===== Utility Functions =====\n/**\n * Enhanced logging function\n */ function logApi(message, level = \"info\", details) {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;\n    // Log to console with appropriate level\n    if (level === \"error\") {\n        console.error(logMessage);\n        if (details) console.error(\"Details:\", details);\n    } else if (level === \"warn\") {\n        console.warn(logMessage);\n        if (details) console.warn(\"Details:\", details);\n    } else {\n        console.log(logMessage);\n        if (details) console.log(\"Details:\", details);\n    }\n// In a production environment, you might want to:\n// 1. Store logs in localStorage for debugging\n// 2. Send logs to a server\n// 3. Maintain a rolling log buffer\n}\n/**\n * Check if data is in cache\n */ function checkCache(symbol) {\n    if (currentConfig.cacheResults) {\n        const cachedData = _cache__WEBPACK_IMPORTED_MODULE_3__.companyDataCache.get(symbol);\n        if (cachedData?.timeSeriesData?.length) {\n            logApi(`Using cached data for ${symbol}`);\n            return {\n                timeSeriesData: cachedData.timeSeriesData,\n                significantMoves: cachedData.significantMoves || []\n            };\n        }\n    }\n    return null;\n}\n/**\n * Save data to cache\n */ function saveToCache(symbol, data) {\n    if (currentConfig.cacheResults && data) {\n        logApi(`Saving ${symbol} data to cache`);\n        _cache__WEBPACK_IMPORTED_MODULE_3__.companyDataCache.set(symbol, data);\n    }\n}\n// Track API key status\nconst apiKeyStatus = {};\n/**\n * Check if an API key is currently rate limited\n */ function isKeyRateLimited(key) {\n    const status = apiKeyStatus[key];\n    if (!status) return false;\n    // Check if we're still within the rate limit period\n    if (status.rateLimitedUntil > Date.now()) {\n        logApi(`API key ${key.slice(0, 8)}... is rate limited until ${new Date(status.rateLimitedUntil).toISOString()}`, \"warn\");\n        return true;\n    }\n    return false;\n}\n/**\n * Mark an API key as rate limited\n */ function markKeyRateLimited(key, provider, durationMs = 60000) {\n    if (!apiKeyStatus[key]) {\n        apiKeyStatus[key] = {\n            key,\n            provider,\n            lastUsed: Date.now(),\n            errorCount: 0,\n            rateLimitedUntil: 0\n        };\n    }\n    apiKeyStatus[key].errorCount++;\n    apiKeyStatus[key].rateLimitedUntil = Date.now() + durationMs;\n    logApi(`Marked API key ${key.slice(0, 8)}... as rate limited for ${durationMs / 1000}s`, \"warn\", {\n        provider,\n        errorCount: apiKeyStatus[key].errorCount\n    });\n}\n/**\n * Update API key status after successful use\n */ function markKeySuccess(key, provider) {\n    if (!apiKeyStatus[key]) {\n        apiKeyStatus[key] = {\n            key,\n            provider,\n            lastUsed: Date.now(),\n            errorCount: 0,\n            rateLimitedUntil: 0\n        };\n    }\n    // Reset error count on success\n    apiKeyStatus[key].errorCount = 0;\n    apiKeyStatus[key].lastUsed = Date.now();\n    apiKeyStatus[key].rateLimitedUntil = 0;\n}\n/**\n * Get the next available API key for a provider\n */ function getAvailableApiKey(provider) {\n    const config = provider === PROVIDERS.ALPHA_VANTAGE.name ? currentConfig.alphaVantageConfig : currentConfig.finnhubConfig;\n    // If we have multiple API keys, try to find one that's not rate limited\n    if (Array.isArray(config.apiKey)) {\n        for (const key of config.apiKey){\n            if (!isKeyRateLimited(key)) {\n                return key;\n            }\n        }\n        return null; // All keys are rate limited\n    }\n    // Single API key\n    return isKeyRateLimited(config.apiKey) ? null : config.apiKey;\n}\n/**\n * Enhanced getOHLCFromFinnhub with API key management\n */ async function getOHLCFromFinnhub(symbol, timeframe) {\n    const apiKey = getAvailableApiKey(PROVIDERS.FINNHUB.name);\n    if (!apiKey) {\n        throw new Error(\"All Finnhub API keys are currently rate limited\");\n    }\n    try {\n        // Make the API call with the selected key\n        const result = await _request_queue__WEBPACK_IMPORTED_MODULE_2__.finnhubQueue.enqueue(async ()=>{\n            logApi(`Fetching OHLC data for ${symbol} from Finnhub`);\n            // Calculate date range based on timeframe\n            const now = Math.floor(Date.now() / 1000);\n            const oneDay = 24 * 60 * 60;\n            let fromTime;\n            let resolution = \"D\";\n            switch(timeframe){\n                case \"1w\":\n                    fromTime = now - 7 * oneDay;\n                    resolution = \"15\";\n                    break;\n                case \"1m\":\n                    fromTime = now - 30 * oneDay;\n                    resolution = \"60\";\n                    break;\n                case \"3m\":\n                    fromTime = now - 90 * oneDay;\n                    resolution = \"D\";\n                    break;\n                case \"6m\":\n                    fromTime = now - 180 * oneDay;\n                    resolution = \"D\";\n                    break;\n                case \"1y\":\n                    fromTime = now - 365 * oneDay;\n                    resolution = \"D\";\n                    break;\n                default:\n                    fromTime = now - 90 * oneDay;\n                    resolution = \"D\";\n                    break;\n            }\n            const candles = await (0,_finnhub__WEBPACK_IMPORTED_MODULE_0__.getStockCandles)(symbol, fromTime, now, \"D\");\n            if (candles.s !== \"ok\" || !candles.t || candles.t.length === 0) {\n                throw new Error(`Invalid Finnhub response for ${symbol}: ${candles.s || \"No status\"}`);\n            }\n            // Convert Finnhub format to our standard OHLC format\n            const timeSeriesData = candles.t.map((timestamp, index)=>{\n                const open = candles.o[index];\n                const close = candles.c[index];\n                const percentageChange = (close - open) / open * 100;\n                return {\n                    date: new Date(timestamp * 1000).toISOString().split(\"T\")[0],\n                    open,\n                    high: candles.h[index],\n                    low: candles.l[index],\n                    close,\n                    volume: candles.v[index],\n                    percentageChange: Number(percentageChange.toFixed(2)),\n                    direction: percentageChange >= 0 ? \"up\" : \"down\"\n                };\n            }).sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n            // Process the data to find significant moves\n            const significantMoves = [];\n            // Calculate average volume\n            const avgVolume = timeSeriesData.reduce((sum, day)=>sum + day.volume, 0) / timeSeriesData.length;\n            // Find days with significant price and volume movement\n            for (const day of timeSeriesData){\n                // Significant move criteria: >2% price change AND volume > 1.5x average\n                if (Math.abs(day.percentageChange) > 2 && day.volume > avgVolume * 1.5) {\n                    significantMoves.push(day);\n                }\n            }\n            // Sort by date (most recent first) and limit to top 10\n            significantMoves.sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n            significantMoves.splice(10);\n            return {\n                timeSeriesData,\n                significantMoves\n            };\n        });\n        // Mark the key as successful\n        markKeySuccess(apiKey, PROVIDERS.FINNHUB.name);\n        return result;\n    } catch (error) {\n        if ((0,_retry_helper__WEBPACK_IMPORTED_MODULE_4__.isRateLimitError)(error)) {\n            markKeyRateLimited(apiKey, PROVIDERS.FINNHUB.name);\n        }\n        throw error;\n    }\n}\n/**\n * Enhanced getOHLCFromAlphaVantage with API key management\n */ async function getOHLCFromAlphaVantage(symbol, timeframe) {\n    const apiKey = getAvailableApiKey(PROVIDERS.ALPHA_VANTAGE.name);\n    if (!apiKey) {\n        throw new Error(\"All Alpha Vantage API keys are currently rate limited\");\n    }\n    try {\n        // Make the API call with the selected key\n        const result = await _request_queue__WEBPACK_IMPORTED_MODULE_2__.alphaVantageQueue.enqueue(async ()=>{\n            logApi(`Fetching OHLC data for ${symbol} from Alpha Vantage with timeframe ${timeframe}`);\n            // Convert timeframe to Alpha Vantage format\n            const outputsize = timeframe === \"1w\" || timeframe === \"1m\" ? \"compact\" : \"full\";\n            const result = await (0,_alphavantage__WEBPACK_IMPORTED_MODULE_1__.getDailyTimeSeries)(symbol, outputsize);\n            // Filter data based on timeframe\n            const now = Date.now();\n            const oneDay = 24 * 60 * 60 * 1000;\n            const timeframeMap = {\n                \"1w\": 7 * oneDay,\n                \"1m\": 30 * oneDay,\n                \"3m\": 90 * oneDay,\n                \"6m\": 180 * oneDay,\n                \"1y\": 365 * oneDay\n            };\n            const timeframeMs = timeframeMap[timeframe] || timeframeMap[\"3m\"];\n            const cutoffDate = new Date(now - timeframeMs).toISOString().split(\"T\")[0];\n            const filteredData = result.allDailyData.filter((day)=>day.date >= cutoffDate);\n            // Calculate significant moves\n            const avgVolume = filteredData.reduce((sum, day)=>sum + day.volume, 0) / filteredData.length;\n            const significantMoves = [];\n            // Find days with significant price and volume movement\n            for (const day of filteredData){\n                // Significant move criteria: >2% price change AND volume > 1.5x average\n                if (Math.abs(day.percentageChange) > 2 && day.volume > avgVolume * 1.5) {\n                    significantMoves.push(day);\n                }\n            }\n            // Sort by date (most recent first) and limit to top 10\n            significantMoves.sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n            significantMoves.splice(10);\n            return {\n                timeSeriesData: filteredData,\n                significantMoves\n            };\n        });\n        // Mark the key as successful\n        markKeySuccess(apiKey, PROVIDERS.ALPHA_VANTAGE.name);\n        return result;\n    } catch (error) {\n        if ((0,_retry_helper__WEBPACK_IMPORTED_MODULE_4__.isRateLimitError)(error)) {\n            markKeyRateLimited(apiKey, PROVIDERS.ALPHA_VANTAGE.name);\n        }\n        throw error;\n    }\n}\n/**\n * Unified API to get OHLC data with fallback\n */ async function getStockData(symbol, timeframe = \"3m\", forceRefresh = false) {\n    logApi(`Starting getStockData for ${symbol}`, \"info\", {\n        timeframe,\n        forceRefresh\n    });\n    // Check if we're rate limited and have cached data\n    if (_cache__WEBPACK_IMPORTED_MODULE_3__.isRateLimited && !forceRefresh) {\n        logApi(`Rate limited check for ${symbol}`, \"warn\", {\n            isRateLimited: _cache__WEBPACK_IMPORTED_MODULE_3__.isRateLimited\n        });\n        const cachedData = checkCache(symbol);\n        if (cachedData) {\n            logApi(`Using cached data for ${symbol} due to rate limiting`, \"warn\", {\n                cacheAge: Date.now() - (cachedData.timestamp || 0),\n                dataPoints: cachedData.timeSeriesData?.length\n            });\n            return cachedData;\n        }\n    }\n    // Standardize symbol and timeframe\n    symbol = symbol.toUpperCase();\n    const standardizedTimeframe = (()=>{\n        switch(timeframe){\n            case \"1w\":\n                return \"1w\";\n            case \"1mo\":\n                return \"1m\";\n            case \"3mo\":\n                return \"3m\";\n            case \"6mo\":\n                return \"6m\";\n            case \"1y\":\n                return \"1y\";\n            default:\n                return \"3m\";\n        }\n    })();\n    logApi(`Standardized symbol: ${symbol}, timeframe: ${standardizedTimeframe}`, \"info\");\n    // Check cache first if not forcing refresh\n    if (!forceRefresh) {\n        const cachedData = checkCache(symbol);\n        if (cachedData) {\n            const cacheAge = Date.now() - (cachedData.timestamp || 0);\n            const isMarketHours = new Date().getHours() >= 9 && new Date().getHours() < 16;\n            const maxCacheAge = isMarketHours ? 60 * 60 * 1000 : 6 * 60 * 60 * 1000;\n            logApi(`Cache check for ${symbol}`, \"info\", {\n                cacheAge,\n                maxCacheAge,\n                isMarketHours,\n                dataPoints: cachedData.timeSeriesData?.length\n            });\n            if (cacheAge < maxCacheAge) {\n                logApi(`Using fresh cached data for ${symbol}`, \"info\");\n                return cachedData;\n            }\n        }\n    } else {\n        logApi(`Forced refresh requested for ${symbol}`, \"info\");\n    }\n    // Determine order of providers based on configuration\n    const providers = [\n        currentConfig.preferredOHLCProvider,\n        ...currentConfig.enableFallback ? [\n            currentConfig.preferredOHLCProvider.name === PROVIDERS.ALPHA_VANTAGE.name ? PROVIDERS.FINNHUB : PROVIDERS.ALPHA_VANTAGE\n        ] : []\n    ];\n    logApi(`Provider order for ${symbol}`, \"info\", {\n        providers: providers.map((p)=>p.name),\n        enableFallback: currentConfig.enableFallback\n    });\n    // Try each provider in sequence\n    let lastError = null;\n    for (const provider of providers){\n        try {\n            logApi(`Attempting to fetch data from ${provider.name}`, \"info\");\n            let result;\n            // Use retry helper for better error handling\n            if (provider.name === PROVIDERS.ALPHA_VANTAGE.name) {\n                result = await (0,_retry_helper__WEBPACK_IMPORTED_MODULE_4__.retryWhenRateLimited)(()=>getOHLCFromAlphaVantage(symbol, standardizedTimeframe), {\n                    maxRetries: 2,\n                    onRetry: (attempt, delay)=>{\n                        logApi(`Retrying Alpha Vantage for ${symbol}`, \"warn\", {\n                            attempt,\n                            delay\n                        });\n                    }\n                });\n            } else {\n                result = await (0,_retry_helper__WEBPACK_IMPORTED_MODULE_4__.retryWhenRateLimited)(()=>getOHLCFromFinnhub(symbol, standardizedTimeframe), {\n                    maxRetries: 2,\n                    onRetry: (attempt, delay)=>{\n                        logApi(`Retrying Finnhub for ${symbol}`, \"warn\", {\n                            attempt,\n                            delay\n                        });\n                    }\n                });\n            }\n            // Log successful response\n            logApi(`Successfully fetched data from ${provider.name}`, \"info\", {\n                dataPoints: result.timeSeriesData?.length,\n                firstDate: result.timeSeriesData?.[0]?.date,\n                lastDate: result.timeSeriesData?.[result.timeSeriesData.length - 1]?.date\n            });\n            // Add timestamp and forceRefresh flag to result\n            const timestampedResult = {\n                ...result,\n                timestamp: Date.now(),\n                forceRefreshed: forceRefresh,\n                provider: provider.name\n            };\n            // Save to cache if allowed\n            if (currentConfig.cacheResults && !forceRefresh) {\n                logApi(`Caching results from ${provider.name}`, \"info\");\n                saveToCache(symbol, timestampedResult);\n            }\n            return timestampedResult;\n        } catch (error) {\n            lastError = error;\n            logApi(`Provider ${provider.name} failed`, \"error\", {\n                error\n            });\n            // Check for rate limiting\n            if (typeof error === \"object\" && error !== null) {\n                const errorStr = error.toString().toLowerCase();\n                if (errorStr.includes(\"rate limit\") || errorStr.includes(\"too many requests\") || errorStr.includes(\"429\")) {\n                    logApi(`Rate limit detected for ${provider.name}`, \"warn\");\n                    (0,_cache__WEBPACK_IMPORTED_MODULE_3__.setRateLimited)(true);\n                }\n            }\n            if (!currentConfig.enableFallback) {\n                logApi(`Fallback disabled, stopping after ${provider.name} failure`, \"warn\");\n                break;\n            }\n        }\n    }\n    // All providers failed\n    logApi(\"All providers failed\", \"error\", {\n        lastError\n    });\n    // Final attempt to get from cache if not forcing refresh\n    if (!forceRefresh) {\n        const finalCacheCheck = checkCache(symbol);\n        if (finalCacheCheck) {\n            logApi(`Using cached data as final fallback for ${symbol}`, \"warn\", {\n                cacheAge: Date.now() - (finalCacheCheck.timestamp || 0),\n                dataPoints: finalCacheCheck.timeSeriesData?.length\n            });\n            return finalCacheCheck;\n        }\n    }\n    // If everything failed, throw the last error\n    throw lastError || new Error(`Failed to fetch stock data for ${symbol}`);\n}\n// ===== News API =====\n/**\n * Get news from Finnhub\n */ async function getNewsFromFinnhub(symbol, days = 30) {\n    logApi(`Fetching news for ${symbol} from Finnhub`);\n    return _request_queue__WEBPACK_IMPORTED_MODULE_2__.finnhubQueue.enqueue(async ()=>{\n        try {\n            // Calculate date range\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setDate(startDate.getDate() - days);\n            const from = (0,_finnhub__WEBPACK_IMPORTED_MODULE_0__.formatDateYYYYMMDD)(startDate);\n            const to = (0,_finnhub__WEBPACK_IMPORTED_MODULE_0__.formatDateYYYYMMDD)(endDate);\n            const news = await (0,_finnhub__WEBPACK_IMPORTED_MODULE_0__.getCompanyNews)(symbol, from, to);\n            if (!news || !Array.isArray(news)) {\n                throw new Error(`Invalid Finnhub news response for ${symbol}`);\n            }\n            // Format the news items\n            return news.filter((item)=>item.category === \"company news\" || item.related?.includes(symbol) || item.headline?.includes(symbol)).map((item)=>({\n                    date: (0,_finnhub__WEBPACK_IMPORTED_MODULE_0__.formatDateYYYYMMDD)(new Date(item.datetime * 1000)),\n                    title: item.headline,\n                    source: item.source,\n                    url: item.url,\n                    summary: item.summary\n                })).slice(0, 10); // Limit to 10 items\n        } catch (error) {\n            logApi(`Error fetching news from Finnhub: ${error}`);\n            throw error;\n        }\n    });\n}\n/**\n * Get news from Alpha Vantage\n * Alpha Vantage has a News Sentiment API we can use as fallback\n */ async function getNewsFromAlphaVantage(symbol) {\n    logApi(`Fetching news for ${symbol} from Alpha Vantage`);\n    return _request_queue__WEBPACK_IMPORTED_MODULE_2__.alphaVantageQueue.enqueue(async ()=>{\n        try {\n            const url = `https://www.alphavantage.co/query?function=NEWS_SENTIMENT&tickers=${symbol}&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (data.Information?.includes(\"API rate limit\")) {\n                (0,_cache__WEBPACK_IMPORTED_MODULE_3__.setRateLimited)(true);\n                throw new Error(\"Alpha Vantage API rate limit exceeded\");\n            }\n            if (!data.feed || !Array.isArray(data.feed)) {\n                throw new Error(`Invalid Alpha Vantage news response for ${symbol}`);\n            }\n            // Format the news items\n            return data.feed.slice(0, 10) // Limit to 10 items\n            .map((item)=>{\n                const time = item.time_published; // Format: YYYYMMDDTHHMMSS\n                const year = time.substring(0, 4);\n                const month = time.substring(4, 6);\n                const day = time.substring(6, 8);\n                return {\n                    date: `${year}-${month}-${day}`,\n                    title: item.title,\n                    source: item.source,\n                    url: item.url,\n                    summary: item.summary\n                };\n            });\n        } catch (error) {\n            logApi(`Error fetching news from Alpha Vantage: ${error}`);\n            throw error;\n        }\n    });\n}\n/**\n * Unified API to get news with fallback\n */ async function getCompanyNewsWithFallback(symbol, days = 30) {\n    // Standardize symbol\n    symbol = symbol.toUpperCase();\n    logApi(`Getting news for ${symbol}`);\n    // Determine order of providers based on configuration\n    const providers = [\n        currentConfig.preferredNewsProvider,\n        ...currentConfig.enableFallback ? [\n            currentConfig.preferredNewsProvider.name === PROVIDERS.FINNHUB.name ? PROVIDERS.ALPHA_VANTAGE : PROVIDERS.FINNHUB\n        ] : []\n    ];\n    // Try each provider in sequence\n    let lastError = null;\n    for (const provider of providers){\n        try {\n            let news;\n            if (provider.name === PROVIDERS.FINNHUB.name) {\n                news = await getNewsFromFinnhub(symbol, days);\n            } else {\n                news = await getNewsFromAlphaVantage(symbol);\n            }\n            // If we got here, the request succeeded\n            logApi(`Successfully fetched news from ${provider.name}`);\n            return news;\n        } catch (error) {\n            lastError = error;\n            logApi(`Provider ${provider.name} failed, ${currentConfig.enableFallback ? \"trying next provider\" : \"aborting\"}`);\n            // If fallback is disabled, break immediately\n            if (!currentConfig.enableFallback) break;\n        }\n    }\n    // All providers failed\n    logApi(\"All providers failed, returning empty news array\");\n    // For news, it's better to return an empty array than throw an error\n    return [];\n}\n// ===== Company Profile API =====\n/**\n * Get company profile from Finnhub\n */ async function getCompanyProfileFromFinnhub(symbol) {\n    logApi(`Fetching company profile for ${symbol} from Finnhub`);\n    return _request_queue__WEBPACK_IMPORTED_MODULE_2__.finnhubQueue.enqueue(async ()=>{\n        try {\n            // Import directly here to avoid circular dependencies\n            const { getCompanyProfile } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./finnhub */ \"(rsc)/./app/utils/finnhub.ts\"));\n            const profile = await getCompanyProfile(symbol);\n            if (!profile || !profile.name) {\n                throw new Error(`Invalid company profile response from Finnhub for ${symbol}`);\n            }\n            return {\n                name: profile.name,\n                description: profile.description || \"\",\n                marketCap: profile.marketCapitalization ? profile.marketCapitalization * 1000000 : 0,\n                volume: profile.shareOutstanding || 0,\n                sector: profile.sector || \"Unknown\",\n                industry: profile.industry || \"Unknown\"\n            };\n        } catch (error) {\n            logApi(`Error fetching company profile from Finnhub: ${error}`);\n            throw error;\n        }\n    });\n}\n/**\n * Get company profile from Alpha Vantage\n * Alpha Vantage has a Company Overview API we can use as fallback\n */ async function getCompanyProfileFromAlphaVantage(symbol) {\n    logApi(`Fetching company profile for ${symbol} from Alpha Vantage`);\n    return _request_queue__WEBPACK_IMPORTED_MODULE_2__.alphaVantageQueue.enqueue(async ()=>{\n        try {\n            const url = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${symbol}&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (data.Information?.includes(\"API rate limit\")) {\n                (0,_cache__WEBPACK_IMPORTED_MODULE_3__.setRateLimited)(true);\n                throw new Error(\"Alpha Vantage API rate limit exceeded\");\n            }\n            if (!data.Name || !data.Symbol) {\n                throw new Error(`Invalid Alpha Vantage company profile response for ${symbol}`);\n            }\n            return {\n                name: data.Name,\n                description: data.Description || \"\",\n                marketCap: parseFloat(data.MarketCapitalization) || 0,\n                volume: parseFloat(data.SharesOutstanding) || 0,\n                sector: data.Sector || \"Unknown\",\n                industry: data.Industry || \"Unknown\"\n            };\n        } catch (error) {\n            logApi(`Error fetching company profile from Alpha Vantage: ${error}`);\n            throw error;\n        }\n    });\n}\n/**\n * Unified API to get company profile with fallback\n */ async function getCompanyProfileWithFallback(symbol) {\n    // Standardize symbol\n    symbol = symbol.toUpperCase();\n    logApi(`Getting company profile for ${symbol}`);\n    // Check if we're rate limited and have cached data\n    if (_cache__WEBPACK_IMPORTED_MODULE_3__.isRateLimited) {\n        logApi(\"API is rate limited, checking cache\", \"warn\");\n        const cachedData = _cache__WEBPACK_IMPORTED_MODULE_3__.companyDataCache.get(symbol);\n        if (cachedData?.companyInfo) {\n            logApi(`Using cached company profile for ${symbol} due to rate limiting`);\n            return cachedData.companyInfo;\n        }\n    }\n    // Check cache first regardless of rate limiting\n    const cachedData = _cache__WEBPACK_IMPORTED_MODULE_3__.companyDataCache.get(symbol);\n    if (cachedData?.companyInfo) {\n        const cacheAge = Date.now() - (cachedData.lastUpdated || 0);\n        const cacheAgeMinutes = Math.round(cacheAge / 60000);\n        logApi(`Found cached company profile for ${symbol} (${cacheAgeMinutes} minutes old)`);\n        // If cache is fresh (less than 30 minutes), use it\n        if (cacheAge < 1800000) {\n            logApi(`Using fresh cached company profile for ${symbol}`);\n            return cachedData.companyInfo;\n        } else {\n            logApi(`Cached company profile for ${symbol} is stale, will try to refresh`);\n        }\n    }\n    // Determine order of providers based on configuration\n    const providers = [\n        {\n            name: \"Finnhub\",\n            priority: 1\n        },\n        ...currentConfig.enableFallback ? [\n            {\n                name: \"AlphaVantage\",\n                priority: 2\n            }\n        ] : []\n    ];\n    // Try each provider in sequence\n    let lastError = null;\n    for (const provider of providers){\n        try {\n            logApi(`Attempting to fetch company profile for ${symbol} from ${provider.name}`);\n            let profile;\n            if (provider.name === \"Finnhub\") {\n                profile = await getCompanyProfileFromFinnhub(symbol);\n            } else {\n                profile = await getCompanyProfileFromAlphaVantage(symbol);\n            }\n            // If we got here, the request succeeded\n            logApi(`Successfully fetched company profile from ${provider.name}`);\n            // Save to cache\n            if (currentConfig.cacheResults) {\n                logApi(`Caching company profile for ${symbol}`);\n                _cache__WEBPACK_IMPORTED_MODULE_3__.companyDataCache.set(symbol, {\n                    name: profile.name,\n                    companyInfo: profile,\n                    lastUpdated: Date.now()\n                });\n            }\n            // Reset rate limited flag if we succeeded\n            (0,_cache__WEBPACK_IMPORTED_MODULE_3__.setRateLimited)(false);\n            return profile;\n        } catch (error) {\n            lastError = error;\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            logApi(`Provider ${provider.name} failed for ${symbol}: ${errorMessage}`, \"error\");\n            // Check if it's a rate limit error\n            if (errorMessage.toLowerCase().includes(\"rate limit\") || errorMessage.toLowerCase().includes(\"too many requests\")) {\n                logApi(`Rate limit detected for ${provider.name}`, \"warn\");\n                // Only set rate limited if we don't have more providers to try\n                if (!currentConfig.enableFallback || provider.name === \"AlphaVantage\") {\n                    (0,_cache__WEBPACK_IMPORTED_MODULE_3__.setRateLimited)(true, 3600000); // 1 hour\n                }\n            }\n            // If fallback is disabled, break immediately\n            if (!currentConfig.enableFallback) {\n                logApi(\"Fallback is disabled, aborting after first failure\", \"warn\");\n                break;\n            } else {\n                logApi(`Will try next provider for ${symbol}`);\n            }\n        }\n    }\n    // All providers failed\n    logApi(\"All providers failed, checking cache one last time\", \"warn\");\n    // Final attempt to get from cache, even if it's stale\n    const finalCacheCheck = _cache__WEBPACK_IMPORTED_MODULE_3__.companyDataCache.get(symbol);\n    if (finalCacheCheck?.companyInfo) {\n        logApi(`Using cached company profile for ${symbol} as last resort`, \"warn\");\n        return finalCacheCheck.companyInfo;\n    }\n    // If everything failed, throw the last error\n    logApi(`Failed to fetch company profile for ${symbol} from any source`, \"error\");\n    throw lastError || new Error(`Failed to fetch company profile for ${symbol}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/stock-api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvolume-analysis%2Froute&page=%2Fapi%2Fvolume-analysis%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvolume-analysis%2Froute.ts&appDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fstefantrasca%2FCascadeProjects%2Fai-video&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();